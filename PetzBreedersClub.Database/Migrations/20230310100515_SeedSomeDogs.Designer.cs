// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetzBreedersClub.Database;

#nullable disable

namespace PetzBreedersClub.Database.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230310100515_SeedSomeDogs")]
    partial class SeedSomeDogs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Offspring", b =>
                {
                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("ChildId", "ParentId");

                    b.HasIndex("ParentId");

                    b.ToTable("Offspring");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.AffixEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Syntax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("RegistrarId");

                    b.ToTable("Affixes");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.BreedEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Breeds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2719),
                            Group = 1,
                            Name = "Australian Kelpie",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 2,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2722),
                            Group = 1,
                            Name = "Belgian Shepherd Dog (Groenendael)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 3,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2723),
                            Group = 1,
                            Name = "Belgian Shepherd Dog (Laekenois)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 4,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2724),
                            Group = 1,
                            Name = "Belgian Shepherd Dog (Malinois)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 5,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2724),
                            Group = 1,
                            Name = "Belgian Shepherd Dog (Tervueren)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 6,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2725),
                            Group = 1,
                            Name = "Shipperke",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 7,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2725),
                            Group = 1,
                            Name = "Croatian Shepherd Dog",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 8,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2726),
                            Group = 1,
                            Name = "Briard",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 9,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2726),
                            Group = 1,
                            Name = "Pyrenean Sheepdog Longhaired",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 10,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2728),
                            Group = 1,
                            Name = "Picardy Sheepdog",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 11,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2729),
                            Group = 1,
                            Name = "Pyrenean Sheepdog Smooth Faced",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 12,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2729),
                            Group = 1,
                            Name = "German Shepherd Dog (Double Coat)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 13,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2730),
                            Group = 1,
                            Name = "German Shepherd Dog (Long and Harsh Outer Coat)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 14,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2730),
                            Group = 1,
                            Name = "Bearded Collie",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 15,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2731),
                            Group = 1,
                            Name = "Border Collie",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 16,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2731),
                            Group = 1,
                            Name = "Collie (Rough)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 17,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2732),
                            Group = 1,
                            Name = "Collie (Smooth)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 18,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2732),
                            Group = 1,
                            Name = "Shetland Sheepdog",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 19,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2733),
                            Group = 1,
                            Name = "Komondor",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 20,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2733),
                            Group = 1,
                            Name = "Kuvasz",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 21,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2734),
                            Group = 1,
                            Name = "Mudi",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 22,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2734),
                            Group = 1,
                            Name = "Puli (pearl-white)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 23,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2735),
                            Group = 1,
                            Name = "Puli (other colors)",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 24,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2735),
                            Group = 1,
                            Name = "Pumi",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 25,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2736),
                            Group = 1,
                            Name = "Bergamasco Shepherd Dog",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 26,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2736),
                            Group = 1,
                            Name = "Maremma and the Abruzzes Sheepdog",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 27,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2737),
                            Group = 1,
                            Name = "Polish Lowland Sheepdog",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 28,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2737),
                            Group = 1,
                            Name = "Tatra Shepherd Dog",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 29,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2738),
                            Group = 1,
                            Name = "Portuguese Sheepdog",
                            Section = 1,
                            Species = "Dogz"
                        },
                        new
                        {
                            Id = 30,
                            AddedBy = "system",
                            CreatedDate = new DateTime(2023, 3, 10, 10, 5, 14, 919, DateTimeKind.Utc).AddTicks(2738),
                            Group = 1,
                            Name = "Romanian Carpathian Shepherd Dog",
                            Section = 1,
                            Species = "Dogz"
                        });
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.BreedFileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.ToTable("BreedFiles");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.BreedStandardEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<string>("Coat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisqualifyingFaults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eyes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Faults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BreedId")
                        .IsUnique();

                    b.ToTable("BreedStandards");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.MemberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.PetEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AffixId")
                        .HasColumnType("int");

                    b.Property<string>("Age")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BreedId")
                        .HasColumnType("int");

                    b.Property<int>("BreederId")
                        .HasColumnType("int");

                    b.Property<string>("CallName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PartialShowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PedigreeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ShowName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AffixId");

                    b.HasIndex("BreedId");

                    b.HasIndex("BreederId");

                    b.HasIndex("DamId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PedigreeNumber")
                        .IsUnique();

                    b.HasIndex("SireId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.SystemNotificationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Params")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemNotifications");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetzBreedersClub.Database.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Offspring", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.PetEntity", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetzBreedersClub.Database.Models.PetEntity", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.AffixEntity", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.MemberEntity", "Owner")
                        .WithMany("Affixes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetzBreedersClub.Database.Models.MemberEntity", "Registrar")
                        .WithMany()
                        .HasForeignKey("RegistrarId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Owner");

                    b.Navigation("Registrar");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.BreedFileEntity", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.BreedEntity", "Breed")
                        .WithMany("BreedFiles")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.BreedStandardEntity", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.BreedEntity", "Breed")
                        .WithOne("BreedStandard")
                        .HasForeignKey("PetzBreedersClub.Database.Models.BreedStandardEntity", "BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.MemberEntity", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.UserEntity", "User")
                        .WithOne("Member")
                        .HasForeignKey("PetzBreedersClub.Database.Models.MemberEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.PetEntity", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.AffixEntity", "Affix")
                        .WithMany("Pets")
                        .HasForeignKey("AffixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetzBreedersClub.Database.Models.BreedEntity", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PetzBreedersClub.Database.Models.MemberEntity", "Breeder")
                        .WithMany("BredPets")
                        .HasForeignKey("BreederId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetzBreedersClub.Database.Models.PetEntity", "Dam")
                        .WithMany()
                        .HasForeignKey("DamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("PetzBreedersClub.Database.Models.MemberEntity", "Owner")
                        .WithMany("OwnedPets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PetzBreedersClub.Database.Models.PetEntity", "Sire")
                        .WithMany()
                        .HasForeignKey("SireId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Affix");

                    b.Navigation("Breed");

                    b.Navigation("Breeder");

                    b.Navigation("Dam");

                    b.Navigation("Owner");

                    b.Navigation("Sire");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.SystemNotificationEntity", b =>
                {
                    b.HasOne("PetzBreedersClub.Database.Models.UserEntity", "User")
                        .WithMany("SystemNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.AffixEntity", b =>
                {
                    b.Navigation("Pets");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.BreedEntity", b =>
                {
                    b.Navigation("BreedFiles");

                    b.Navigation("BreedStandard");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.MemberEntity", b =>
                {
                    b.Navigation("Affixes");

                    b.Navigation("BredPets");

                    b.Navigation("OwnedPets");
                });

            modelBuilder.Entity("PetzBreedersClub.Database.Models.UserEntity", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("SystemNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
