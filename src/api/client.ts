//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @return OK
     */
    registerAffix(body: AffixRegistrationForm , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/affixes/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegisterAffix(_response);
        });
    }

    protected processRegisterAffix(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getOwnedAffixes(  cancelToken?: CancelToken | undefined): Promise<RegisteredAffixListItem[]> {
        let url_ = this.baseUrl + "/api/affixes/owned";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetOwnedAffixes(_response);
        });
    }

    protected processGetOwnedAffixes(response: AxiosResponse): Promise<RegisteredAffixListItem[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            let result200: any = response.data;
            return Promise.resolve<RegisteredAffixListItem[]>(result200);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<RegisteredAffixListItem[]>(null as any);
    }

    /**
     * @param species (optional) 
     * @return OK
     */
    getBreedNamesList(species: Species | undefined , cancelToken?: CancelToken | undefined): Promise<BreedNameListItem[]> {
        let url_ = this.baseUrl + "/api/breeds/names?";
        if (species === null)
            throw new Error("The parameter 'species' cannot be null.");
        else if (species !== undefined)
            url_ += "species=" + encodeURIComponent("" + species) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBreedNamesList(_response);
        });
    }

    protected processGetBreedNamesList(response: AxiosResponse): Promise<BreedNameListItem[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            let result200: any = response.data;
            return Promise.resolve<BreedNameListItem[]>(result200);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<BreedNameListItem[]>(null as any);
    }

    /**
     * @return OK
     */
    getPetProfileById(  cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/pets/profile/{id}";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPetProfileById(_response);
        });
    }

    protected processGetPetProfileById(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    registerUser(body: RegistrationForm , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processRegisterUser(_response);
        });
    }

    protected processRegisterUser(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    signIn(body: UserSignIn , cancelToken?: CancelToken | undefined): Promise<SignedInUserInfo> {
        let url_ = this.baseUrl + "/api/users/sign-in";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignIn(_response);
        });
    }

    protected processSignIn(response: AxiosResponse): Promise<SignedInUserInfo> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            let result200: any = response.data;
            return Promise.resolve<SignedInUserInfo>(result200);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<SignedInUserInfo>(null as any);
    }

    /**
     * @return OK
     */
    signOut(  cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/sign-out";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSignOut(_response);
        });
    }

    protected processSignOut(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    authenticate(body: number , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/users/authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAuthenticate(_response);
        });
    }

    protected processAuthenticate(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            let result200: any = response.data;
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * @return OK
     */
    getUserNotifications(  cancelToken?: CancelToken | undefined): Promise<Notification[]> {
        let url_ = this.baseUrl + "/api/users/notifications";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUserNotifications(_response);
        });
    }

    protected processGetUserNotifications(response: AxiosResponse): Promise<Notification[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            let result200: any = response.data;
            return Promise.resolve<Notification[]>(result200);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<Notification[]>(null as any);
    }

    /**
     * @return OK
     */
    deleteNotification(body: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/notifications/delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDeleteNotification(_response);
        });
    }

    protected processDeleteNotification(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    markAllNotificationsAsRead(  cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/notifications/mark-all-read";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMarkAllNotificationsAsRead(_response);
        });
    }

    protected processMarkAllNotificationsAsRead(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    markNotificationAsRead(body: number , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/notifications/mark-read";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processMarkNotificationAsRead(_response);
        });
    }

    protected processMarkNotificationAsRead(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    dEVAddNotification(body: AddNotification , cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/users/notifications/add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDEVAddNotification(_response);
        });
    }

    protected processDEVAddNotification(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
    
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            return throwException("An unexpected server error occurred.", status, response.statusText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface AddNotification {
    userId: number;
    text: string;
    type: NotificationType;
}

export interface AffixRegistrationForm {
    name: string;
    affixSyntax: AffixSyntax;
}

export enum AffixSyntax {
    Prefix = "Prefix",
    Suffix = "Suffix",
    Names = "Names",
    The = "The",
    Of = "Of",
    From = "From",
}

export interface BreedNameListItem {
    id: number;
    name: string;
    species: Species;
}

export interface Notification {
    id: number;
    date: Date;
    text: string;
    type: NotificationType;
    read: boolean;
}

export enum NotificationType {
    Info = "Info",
    Warning = "Warning",
    Error = "Error",
    Success = "Success",
}

export interface RegisteredAffixListItem {
    name: string;
    syntax: AffixSyntax;
    registrationDate: Date;
}

export interface RegistrationForm {
    email?: string | undefined;
    password?: string | undefined;
    memberName?: string | undefined;
}

export interface SignedInUserInfo {
    id: number;
    email: string;
}

export enum Species {
    Catz = "Catz",
    Dogz = "Dogz",
}

export interface UserSignIn {
    email?: string | undefined;
    password?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}